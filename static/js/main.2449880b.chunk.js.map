{"version":3,"sources":["store.js","App.js","serviceWorker.js","index.js"],"names":["initialState","sidebarShow","store","createStore","state","type","rest","loading","className","DefaultLayout","React","lazy","Login","Page404","Page500","App","Component","render","Suspense","fallback","exact","path","name","props","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gqCAEA,MAAMA,EAAe,CACnBC,aAAa,GAaAC,MADDC,aATM,CAACC,EAAQJ,GAAgBK,UAASC,KAE7C,QADCD,EAEG,IAAKD,KAAUE,GAEfF,I,iBCFb,MAAMG,EACJ,qBAAKC,UAAU,mBAAf,SACE,qBAAKA,UAAU,kCAKbC,EAAgBC,IAAMC,MAAK,IAAM,6DAGjCC,EAAQF,IAAMC,MAAK,IAAM,uDACzBE,EAAUH,IAAMC,MAAK,IAAM,uDAC3BG,EAAUJ,IAAMC,MAAK,IAAM,uDAEjC,MAAMI,UAAYC,YAChBC,SACE,OACE,eAAC,IAAD,CAAUf,MAAOA,EAAjB,UACE,cAAC,IAAD,UACE,cAAC,IAAMgB,SAAP,CAAgBC,SAAUZ,EAA1B,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,KAAK,aAAaL,OAASM,GAAU,cAACX,EAAD,IAAWW,MAO3E,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWL,OAASM,GAAU,cAACV,EAAD,IAAaU,MACzE,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,OAAOC,KAAK,WAAWL,OAASM,GAAU,cAACT,EAAD,IAAaS,MACzE,cAAC,IAAD,CAAOF,KAAK,IAAIC,KAAK,OAAOL,OAASM,GAAU,cAACd,EAAD,IAAmBc,aAIxE,cAAC,IAAD,QAMOR,QCvCKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCNnCC,IAASZ,OACP,cAAC,IAAD,CAAUf,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF4B,SAASC,eAAe,SDwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAMC,IAClCA,EAAaC,kB","file":"static/js/main.2449880b.chunk.js","sourcesContent":["import { createStore } from 'redux'\r\n\r\nconst initialState = {\r\n  sidebarShow: true,\r\n}\r\n\r\nconst changeState = (state = initialState, { type, ...rest }) => {\r\n  switch (type) {\r\n    case 'set':\r\n      return { ...state, ...rest }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst store = createStore(changeState)\r\nexport default store\r\n","import React, { Component } from 'react'\r\nimport { Route, Switch, BrowserRouter } from 'react-router-dom'\r\nimport './scss/style.scss'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport store from \"./store\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst loading = (\r\n  <div className=\"pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n  </div>\r\n)\r\n\r\n// Containers\r\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'))\r\n\r\n// Pages\r\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\r\nconst Page404 = React.lazy(() => import('./views/pages/page404/Page404'))\r\nconst Page500 = React.lazy(() => import('./views/pages/page500/Page500'))\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <React.Suspense fallback={loading}>\r\n            <Switch>\r\n              <Route exact path=\"/login\" name=\"Login Page\" render={(props) => <Login {...props} />} />\r\n              {/*<Route\r\n                exact\r\n                path=\"/register\"\r\n                name=\"Register Page\"\r\n                render={(props) => <Register {...props} />}\r\n              />*/}\r\n              <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\r\n              <Route exact path=\"/500\" name=\"Page 500\" render={(props) => <Page500 {...props} />} />\r\n              <Route path=\"/\" name=\"Home\" render={(props) => <DefaultLayout {...props} />} />\r\n            </Switch>\r\n          </React.Suspense>\r\n        </BrowserRouter>\r\n        <ToastContainer />\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.')\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import 'react-app-polyfill/stable'\r\nimport 'core-js'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}